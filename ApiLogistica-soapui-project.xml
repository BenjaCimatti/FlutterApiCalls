<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="b93a18f9-56fa-40ef-81d3-b8298a439498" activeEnvironment="Default" name="Flutter" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="6459b059-cf40-436e-a58e-56f4dad8f237" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:1902" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://NO586051:8089/</con:endpoint><con:endpoint>http://localhost:1902</con:endpoint></con:endpoints><con:resource name="Get" path="/api/Token/Get" id="3e77f5de-88c3-4eb1-a0ca-1568f0ca9576"><con:settings/><con:parameters/><con:method name="Get 1" id="f8910c67-81cc-4533-a28d-31efb5d482e7" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:get="http://localhost/Token/Get">get:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="http://localhost/Token/Get">get:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="http://localhost/Token/Get">get:Response</con:element></con:representation><con:request name="Request 1" id="5c64b0d3-c09f-459f-ad57-5996b7c61c53" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request>{
    "NombreUsuario" : "Admin",
    "Clave" : "Admin123",
    "IdOrganizacion" : 1
}</con:request><con:originalUri>http://localhost/Token/Get</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Get" path="/api/Version/Get" id="30f9850d-d003-4975-ba5e-3f1460329094"><con:settings/><con:parameters><con:parameter><con:name>Componente</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="6e6513e6-b1ff-4471-9e16-05ac7a1c1dd3" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="http://localhost/api/Version/Get">get:Response</con:element></con:representation><con:request name="Request 1" id="43d2f3be-bd11-422f-8617-5d6c010c9376" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.0.0.4:8082</con:endpoint><con:request/><con:originalUri>http://localhost/api/Version/Get</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Componente" value="ApiLogistica" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Componente</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Get" path="/api/Envios/Get" id="a82abc50-d022-49c4-9432-ce12c51d2175"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Estado</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="6f26ef6b-e19c-4117-975c-790bc16ea2ad" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>404 401</con:status><con:params/><con:element xmlns:get="http://localhost/api/Envios/Get">get:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="1c73efc5-bddb-4d01-8934-a9fe9832fb32" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/Envios/Get</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI5MzFjOWMyMi1hZWE1LTQwYmYtYmM5OC1kODFkMjNlMzQwYjEiLCJVc3VhcmlvIjoiQWRtaW4iLCJJZE9yZ2FuaXphY2lvbiI6IjEiLCJleHAiOjE2MjE1NjEwNTEsImlzcyI6Imh0dHA6Ly9teXNpdGUuY29tIiwiYXVkIjoiaHR0cDovL215c2l0ZS5jb20ifQ.YPPaGdOjOwuh4hwJQjAdC6ZwVKbUoA1mvE__jE8AzyM"/>
  <con:entry key="Estado" value="1"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>Estado</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:restMockService id="4b46ac78-cda9-4700-a7ed-45ee87f8f53f" port="8088" path="/" host="10.0.0.5" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:restMockAction name="/api/Token/Get" method="POST" resourcePath="/api/Token/Get" id="a6809c0f-db53-485b-8e71-6398483af32c"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="Response 1" id="e2eb712b-2b82-486a-a7af-f55747813e66" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
   "data": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlYjViOTg5Yi0wODY0LTQ0NjgtYmJlNi1kZTU5ZDQyZjM1NDAiLCJVc3VhcmlvIjoianBlcmV6IiwiSWRUcmFuc3BvcnRpc3RhIjoiMSIsIklkUm9sIjoiMiIsIlVsdGltb0xvZ2luIjoiMDMvMDYvMjAyMSAxMTozMTo1MSIsIklkT3JnYW5pemFjaW9uIjoiMSIsImV4cCI6MTYyMzI3MTQxOSwiaXNzIjoiaHR0cDovL2h0dHA6Ly9vcHRpY2FlbGVuYS5jb20uYXIvIiwiYXVkIjoiaHR0cDovL2h0dHA6Ly9vcHRpY2FlbGVuYS5jb20uYXIvIn0.OC-xe_9uIRXIZ_oeymDXgYmnVBIfQP4lKpGbIdnm_1M",
   "Usuario": "jperez",
   "IdTransportista": 1,
   "idCliente": null,
   "IdRol": 2,
   "UltimoLogin": "2021-06-03T11:31:51",
   "IdOrganizacion": 1,
   "DescUsuario": "COMEX"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/Version/Get" method="GET" resourcePath="/api/Version/Get" id="0f6f98fa-1da7-43c6-b1da-605558862375"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="Response 1" id="70649483-6a11-405e-af48-b2df8e341912" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{ "Version" : "1.0.0" }</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/Envios/Get" method="GET" resourcePath="/api/Envios/Get" id="67fc73d9-1806-4e6d-bc17-15e968ec9c91"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="Response 1" id="7fbf210f-a3c9-496f-9ea0-8a846c693606" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
  {
    "IdEnvio": 78,
    "IdCliente": 14445,
    "DescCliente": "ALCORTA VISION",
    "IdTransportista": 2,
    "DescTransportista": "TN LOGISTICA ,WALTER S.NICOLAS",
    "FechaCarga": "2021-06-11T22:03:48",
    "FechaEnvio": null,
    "IdEstado": 1,
    "DescEstado": "Ingresado",
    "GeoLatitud": null,
    "GeoLongitud": null
  },
  {
    "IdEnvio": 79,
    "IdCliente": 15316,
    "DescCliente": "ALEJANDRO GIORDANO Y ADELMA OCAMPO SH",
    "IdTransportista": 2,
    "DescTransportista": "TN LOGISTICA ,WALTER S.NICOLAS",
    "FechaCarga": "2021-06-09T22:03:49",
    "FechaEnvio": null,
    "IdEstado": 1,
    "DescEstado": "Ingresado",
    "GeoLatitud": null,
    "GeoLongitud": null
  },
  {
    "IdEnvio": 80,
    "IdCliente": 11395,
    "DescCliente": "AMUR VENADO TUERTO",
    "IdTransportista": 2,
    "DescTransportista": "TN LOGISTICA ,WALTER S.NICOLAS",
    "FechaCarga": "2021-06-09T22:03:49",
    "FechaEnvio": null,
    "IdEstado": 1,
    "DescEstado": "Ingresado",
    "GeoLatitud": null,
    "GeoLongitud": null
  },
  {
    "IdEnvio": 81,
    "IdCliente": 111438,
    "DescCliente": "ANDRADA PAULA Y MUSSETTI SILVINA",
    "IdTransportista": 4,
    "DescTransportista": "CORREO ANDREANI",
    "FechaCarga": "2021-06-10T22:03:49",
    "FechaEnvio": null,
    "IdEstado": 1,
    "DescEstado": "Ingresado",
    "GeoLatitud": null,
    "GeoLongitud": null
  },
  {
    "IdEnvio": 82,
    "IdCliente": 111829,
    "DescCliente": "ARMASE S.R.L.",
    "IdTransportista": 5,
    "DescTransportista": "COMEX",
    "FechaCarga": "2021-06-08T22:03:49",
    "FechaEnvio": null,
    "IdEstado": 1,
    "DescEstado": "Ingresado",
    "GeoLatitud": null,
    "GeoLongitud": null
  },
  {
    "IdEnvio": 83,
    "IdCliente": 111684,
    "DescCliente": "ASOCIACIÓN MUTUAL FERROVIARIA",
    "IdTransportista": 6,
    "DescTransportista": "TRANSPORTE ALMADA  (NO SE USA)",
    "FechaCarga": "2021-06-02T22:03:49",
    "FechaEnvio": null,
    "IdEstado": 1,
    "DescEstado": "Ingresado",
    "GeoLatitud": null,
    "GeoLongitud": null
  },
  {
    "IdEnvio": 84,
    "IdCliente": 749,
    "DescCliente": "BEGINO JUAN JOSE",
    "IdTransportista": 7,
    "DescTransportista": "TRANSRED",
    "FechaCarga": "2021-06-27T22:03:49",
    "FechaEnvio": null,
    "IdEstado": 1,
    "DescEstado": "Ingresado",
    "GeoLatitud": null,
    "GeoLongitud": null
  }
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/Token/Renew" method="GET" resourcePath="/api/Token/Renew" id="6d9182e3-a543-4e41-b955-ec235e7e6c1a"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="Response 1" id="636e84b3-a79d-484a-9c30-e12572b66ab2" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
   "data": "NUEVO TOKEN"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/Token/Verify" method="GET" resourcePath="/api/Token/Verify" id="2312ffdf-1d9e-4c27-9ec1-a99b0738e096"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="Response 1" id="88f12d9f-8b28-4e21-83b8-dce13f62ab64" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{ "status" : "Ok!" }</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>